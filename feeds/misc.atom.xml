<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Freedev</title><link href="/" rel="alternate"></link><link href="/feeds/misc.atom.xml" rel="self"></link><id>/</id><updated>2016-02-13T21:23:00-02:00</updated><entry><title>Introdução ao NoSQL e MongoDB</title><link href="/intro-nosql-mongo.html" rel="alternate"></link><updated>2016-02-13T21:23:00-02:00</updated><author><name>Antonio Alves Lima</name></author><id>tag:,2016-02-13:intro-nosql-mongo.html</id><summary type="html">&lt;h3&gt;NoSQL&lt;/h3&gt;
&lt;p&gt;Devido ao grande crescimento de aplicações web e a cada vez ser mais comum a grande quantidade de informações,
criou-se um problema: Como lidar com isso de maneira eficaz?&lt;/p&gt;
&lt;p&gt;O NoSQL surgiu da necessidade de uma melhor performance e escalabilidade, pois os bancos relacionais são muito restritos a isso.
Quanto mais dados no banco, torna-se necessário mais máquinas e mais memória. O movimento NoSQL não tem como objetivo substituir
 o modelo relacional mas sim o fim do modelo relacional como a única solução correta ou válida.&lt;/p&gt;
&lt;h3&gt;As principais diferenças entre o modelo relacional e o não relacional são:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Os bancos de dados não relacionais não suportam operações de junções de tabela.&lt;/li&gt;
&lt;li&gt;Não existe normalização, isto é, são schemaless, diferentemente de bancos relacionais.&lt;ul&gt;
&lt;li&gt;Utilizar schemaless, significa não se preocupar com os tipos de dados, nomes de colunas, nome de tabelas e seus relacionamentos. Não há necessidade de realizar normalização.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Os bancos de dados relacionais são verticalmente escaláveis enquanto os NoSQL's são horizontalmente escaláveis.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tipos de bancos NoSQL&lt;/h4&gt;
&lt;p&gt;Como os bancos NoSQL não usam o modelo relacional irei apresentar quais os modelos disponíveis no NoSQL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chave-Valor&lt;ul&gt;
&lt;li&gt;É armazenado uma chave e um valor, esse valor pode ser qualquer informação, suporte a maior carga de dados.&lt;/li&gt;
&lt;li&gt;Exemplo: Memcache, SimpleDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Documento&lt;ul&gt;
&lt;li&gt;Armazena documento, sem a necessidade de definir sua estrutura. Os documentos são armazenados
 em conjunto mesmo que não tenham nada em comum. Uma outra característica importante desse modelo é a tendência
 de desnormalização dos dados, deixando em um só documento todas as informações relacionadas desejadas.&lt;/li&gt;
&lt;li&gt;Exemplo: CouchDB, MongoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Grafo&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"Grafo é uma estrutura de dados que conecta um conjunto de vértices através de um conjunto de arestas.
Os bancos de dados de grafo modernos suportam estruturas de grafo multi-relacionais, onde existem tipos diferentes
de vértices (representando pessoas, lugares, itens) e diferentes tipos de arestas (como por exemplo amigo de,
 mora em, comprado por)[...].” - Marko Rodriguez (arquiteto de sistemas de grafo da AT&amp;amp;T Interactive)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Exemplo: Neo4j, monetdb, ArangoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mistos&lt;ul&gt;
&lt;li&gt;São os bancos que possuem dois ou mais tipos de modelos. Como exemplo existe o &lt;a href="https://www.arangodb.com/"&gt;ArangoDB&lt;/a&gt; que utiliza o modelo de Documento e Grafo.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;MongoDB&lt;/h3&gt;
&lt;p&gt;O &lt;a href="https://www.mongodb.org/"&gt;MongoDB&lt;/a&gt; é derivado da palavra humongous em inglês, que quer dizer gigantesco. Ele é um banco que utiliza o conceito de modelo de Documentos.&lt;/p&gt;
&lt;p&gt;Foi criado com o objetivo de trabalhar com o modelo de documentos em vez de linhas, extremamente rápido, amplamente escalável e fácil de usar. Para isso foi deixado algumas funcionalidades de lado, o que o torna não recomendável para determinadas situações, como por exemplo não deve ser usado para um sistema de contabilidade, pois o MongoDB não possui suporte a transações.&lt;/p&gt;
&lt;p&gt;Armazena os seus documentos na coleção em formato BSON - que é a abreviatura de binary JSON (JSON binário) - desenvolvido pela equipe do MongoDB. No entanto a manipulação dos dados, tanto para escrita como para consulta dos dados, é feita usando o formato JSON&lt;/p&gt;
&lt;h4&gt;Alguns serviços do MongoDB&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;mongod&lt;ul&gt;
&lt;li&gt;inicia o servidor do MongoDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mongo&lt;ul&gt;
&lt;li&gt;inicia o cliente do Mongo.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mongoimport&lt;ul&gt;
&lt;li&gt;serviço utilizado para importação dos dados em formato JSON ou CSV para uma coleção no BD.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mongoimport --db nome_do_banco --collection nome_da_colecao --drop --file data.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mongoexport&lt;ul&gt;
&lt;li&gt;serviço utilizado para exportação dos dados de uma coleção para o formato JSON.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mongoexport --db nome_do_banco --collection nome_da_colecao --out minha_colecao.json&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Últimas considerações&lt;/h3&gt;
&lt;p&gt;Esta é a primeira parte do artigo no qual resolvi compartilhar meu conhecimento e o que estou aprendendo no workshop do Be MEAN. 
Logo irei colocar o link para os outros post que publicarei no blog.&lt;/p&gt;</summary><category term="nosql"></category><category term="mongodb"></category></entry></feed>